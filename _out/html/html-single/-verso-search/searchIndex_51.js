window.docContents[51].resolve({"/#PSBP-Documentation--Programming-With-Failure--instance-WithFailure-___":{"id":"/#PSBP-Documentation--Programming-With-Failure--instance-WithFailure-___","header":"10.2. instance WithFailure ε","context":"PSBP Documentation\u0009Programming With Failure","contents":"WithFailure ε is implemented in terms of FailureT, which is defined in terms of ⊕. Given an initial (argument)\nvalue, a program with failure may transform it to a final failure (result) value (at left) or a final succedd (result)\nvalue (at right).\n\nstructure FailureT\n    (ε : Type)\n    (computation : Type → Type)\n    (β : Type) : Type where\n  toComputationOfSum : computation (ε ⊕ β)\n\ninstance [Monad computation] :\n    Monad (FailureT ε computation) where\n  map :=\n  λ αfβ ⟨cεoα⟩  =>\n    ⟨cεoα >>= λ εoα => match εoα with\n      | (.inr α) => pure $ .inr (αfβ α)\n      | (.inl ε) => pure $ .inl ε⟩\n  pure :=\n    λ α =>\n      .mk (pure (Sum.inr α))\n  bind :=\n    λ ⟨cεoα⟩ αfftεcβ =>\n      ⟨cεoα >>= λ εoα => match εoα with\n        | .inr α  => (αfftεcβ α).toComputationOfSum\n        | .inl ε  => pure (.inl ε)⟩\n\ninstance {ε : Type}\n    [Applicative computation] :\n  WithFailure ε\n    (FromComputationValuedFunction\n      (FailureT ε computation)) where\n  failureWith :=\n    λ αfε =>\n      ⟨λ α =>\n        ⟨pure $ Sum.inl $ αfε α⟩⟩\n\n\n"}});