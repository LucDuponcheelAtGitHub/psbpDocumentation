window.docContents[9].resolve({"/#PSBP-Documentation--Laws--class-LawfulCreational":{"id":"/#PSBP-Documentation--Laws--class-LawfulCreational","header":"6.4. class LawfulCreational","context":"PSBP Documentation\u0009Laws","contents":"applyAtFirst, applyAtSecond, onlyFirst and assoc are used in the Creational laws below.\n\ndef applyAtFirst\n    [Functional program] :\n  (α → β) → program (α × γ) (β × γ) :=\n    λ αfβ => asProgram λ (α, γ) => (αfβ α, γ)\n\n\ndef applyAtSecond\n    [Functional program] :\n  (β → γ) → program (α × β) (α × γ) :=\n    λ βfγ => asProgram λ (α, β) => (α, βfγ β)\n\n\nand, let\n\ndef first\n    [Functional program] :\n  program (α × β) α :=\n    asProgram λ (α, _) => α\n\n\nand\n\ndef second\n    [Functional program] :\n  program (α × β) β :=\n    asProgram λ (_, β) => β\n\n\nin\n\ndef onlyFirst\n    [Functional program]\n    [Creational program]\n    [Sequential program] :\n  program α β → program (α × γ) (β × γ) :=\n    λ αpβ => (first >=> αpβ) &&& second\n\n\nand\n\ndef assoc\n    [Functional program] :\n  program ((α × β) × γ) (α × (β × γ)) :=\n    asProgram (λ ((a, b), c) => (a, (b, c)))\n\n\nCreational comes with laws.\n\nclass LawfulCreational (program : Type → Type → Type)\n    [Functional program]\n    [Sequential program]\n    [Creational program] : Prop where\n  creational_onlyFirst_asProgram\n      (αfβ : α → β) :\n    (onlyFirst (asProgram αfβ)\n      : program (α × γ) (β × γ)) =\n      applyAtFirst αfβ\n  creational_onlyFirst_sequential\n      (αpβ : program α β)\n      (βpγ : program β γ) :\n    (onlyFirst (αpβ >=> βpγ) :\n      program (α × δ) (γ × δ)) =\n      (onlyFirst αpβ >=> onlyFirst βpγ)\n  creational_onlyFirst_first\n      (αpβ : program α β) :\n    (onlyFirst αpβ >=> (first : program (β × γ) β)\n      : program (α × γ) β) =\n      ((first : program (α × γ) α) >=> αpβ)\n  creational_onlyFirst_applyAtSecond\n      (αpβ : program α β)\n      (γfδ : γ → δ) :\n    (onlyFirst αpβ >=> applyAtSecond γfδ\n      : program (α × γ) (β × δ)) =\n      (applyAtSecond γfδ >=> onlyFirst αpβ)\n  creational_onlyFirst_assoc\n      (αpβ : program α β) :\n    (onlyFirst (onlyFirst αpβ) >=> assoc\n      : program ((α × γ) × δ) (β × (γ × δ))) =\n      (assoc >=> onlyFirst αpβ)\n\n\n"}});