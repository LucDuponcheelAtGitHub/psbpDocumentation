window.docContents[114].resolve({"/#PSBP-Documentation--Reactive-implementation-___-materialization":{"id":"/#PSBP-Documentation--Reactive-implementation-___-materialization","header":"8. Reactive implementation / materialization","context":"PSBP Documentation","contents":"There is much more work to be done for reactive implementations. They are callback handler, a.k.a. continuation based.\n\nstructure ReactiveT\n    (ρ : Type)\n    (computation: Type → Type)\n    (α : Type) where\n  runReactiveT : (α → computation ρ) → computation ρ\n\nabbrev Reactive ρ := ReactiveT ρ Active\n\ninstance {ρ: Type} :\n    Functor (ReactiveT ρ computation) where\n  map : {α β : Type} →\n      (α → β) →\n      (ReactiveT ρ computation α →\n      ReactiveT ρ computation β) :=\n    λ αfβ rpa =>\n      ReactiveT.mk (λ γ => rpa.runReactiveT (γ ∘ αfβ))\n\ninstance {ρ: Type} :\n    Applicative (ReactiveT ρ computation) where\n  pure := λ α => ReactiveT.mk (λ afcr => afcr α)\n  seq: {α β : Type} →\n      (ReactiveT ρ computation (α → β)) →\n      (Unit → (ReactiveT ρ computation α)) →\n      (ReactiveT ρ computation β) :=\n    λ rpafc ufrpa =>\n      ReactiveT.mk (λ bfcr =>\n        rpafc.runReactiveT $\n          (λ αfβ =>\n            (ufrpa ()).runReactiveT (bfcr ∘ αfβ)))\n\ninstance {ρ: Type} :\n    Monad (ReactiveT ρ computation) where\n  bind: {α β : Type} →\n      (ReactiveT ρ computation α) →\n      (α → ReactiveT ρ computation β) →\n      (ReactiveT ρ computation β) :=\n    λ rpa afrpb =>\n      ReactiveT.mk (λ bfcr =>\n        rpa.runReactiveT (λ α =>\n        (afrpb α).runReactiveT bfcr))\n\nabbrev ReactiveProgram ρ computation :=\n  FromComputationValuedFunction (ReactiveT ρ computation)\n\ndef materializeReactive {α β : Type} :\n    ReactiveProgram β Active α β → α → β :=\n  λ αpβ =>\n    λ α =>\n      (αpβ.toComputationValuedFunction α).runReactiveT id\n\n\nThe ρ stands for the \"result\" of callback handling.\n\nWe can now run our programs in a reactive way.\n\n#eval (materializeReactive fibonacci) 10\n\n\n89\n\n\n#eval (materializeReactive factorial) 10\n\n\n3628800\n\n\n#eval (materializeReactive twiceMinusOne01) 10\n\n\n18\n\n\n#eval (materializeReactive twiceMinusOne02) 10\n\n\n18\n\n\nWe did not change the definition of our programs, we only materialized them in another way.\n\n"}});