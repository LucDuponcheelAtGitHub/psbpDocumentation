window.docContents[225].resolve({"/#PSBP-Documentation--Theorems--Functorial--theorems":{"id":"/#PSBP-Documentation--Theorems--Functorial--theorems","header":"8.2. Functorial  theorems","context":"PSBP Documentation\u0009Theorems","contents":"Theorem functorial_identity' the id_map law of LawfulFunctor.\n\ntheorem functorial_identity'\n  {α β : Type}\n    [Functor computation]\n    [LawfulFunctor computation]\n  (αpβ : FromComputationValuedFunction computation α β) :\n    (αpβ >-> id :\n      FromComputationValuedFunction computation α β)\n      = αpβ := by\n  let αfcβ := αpβ.toComputationValuedFunction\n  calc\n    (αpβ >-> id)\n        = ⟨λ α => id <$> αfcβ α⟩\n          := rfl\n    _   = ⟨λ α => αfcβ α ⟩\n          := congrArg\n               FromComputationValuedFunction.mk\n               (funext λ α => id_map (αfcβ α))\n    _   = ⟨αfcβ⟩\n          := rfl\n\n\nTheorem functorial_identity uses simp to let Lean do the heavy lifting\n\n@[simp] theorem functorial_identity\n  {α β : Type}\n    [Functor computation]\n    [LawfulFunctor computation]\n  (αpβ : FromComputationValuedFunction computation α β) :\n    (αpβ >-> id :\n      FromComputationValuedFunction computation α β)\n      = αpβ := by\n    simp[andThenF]\n\n\nTheorem functorial_sequential' uses the comp_map law of LawfulFunctor.\n\ntheorem functorial_sequential'\n  {α β γ δ : Type}\n    [Functor computation]\n    [LawfulFunctor computation]\n  (αpβ : FromComputationValuedFunction computation α β)\n  (βfγ : β → γ)\n  (γfδ : γ → δ) :\n    ((αpβ >-> βfγ) >-> γfδ :\n      FromComputationValuedFunction computation α δ)\n      = (αpβ >-> (γfδ ∘ βfγ)) := by\n  let αfcβ := αpβ.toComputationValuedFunction\n  calc\n    ((αpβ >-> βfγ) >-> γfδ)\n        = (⟨λ α => βfγ <$> αfcβ α⟩ >-> γfδ)\n          := rfl\n    _   = ⟨λ α => γfδ <$> (λ α => βfγ <$> αfcβ α) α⟩\n          := rfl\n    _   = ⟨λ α => γfδ <$> βfγ <$> αfcβ α⟩\n          := rfl\n    _   = ⟨λ α => (γfδ ∘ βfγ) <$> αfcβ α⟩\n          := congrArg\n               FromComputationValuedFunction.mk\n               (funext λ α =>\n                 Eq.symm (comp_map βfγ γfδ (αfcβ α)))\n    _   = (αpβ >-> (γfδ ∘ βfγ))\n          := rfl\n\n\nTheorem functorial_sequential uses simp to let Lean do the heavy lifting\n\n@[simp] theorem functorial_sequential\n    {α β γ δ : Type}\n    [Functor computation]\n    [LawfulFunctor computation]\n  (αpβ : FromComputationValuedFunction computation α β)\n  (βfγ : β → γ)\n  (γfδ : γ → δ) :\n    ((αpβ >-> βfγ) >-> γfδ :\n      FromComputationValuedFunction computation α δ)\n      = (αpβ >-> (γfδ ∘ βfγ)) := by simp[andThenF, comp_map]\n\n\n"}});