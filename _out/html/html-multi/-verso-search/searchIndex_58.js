window.docContents[58].resolve({"/The--PSBP--Library-type-classes/Programs-and-program-combinators-defined-in-terms-of-the-basic-ones/#PSBP-Documentation--The--PSBP--Library-type-classes--Programs-and-program-combinators-defined-in-terms-of-the-basic-ones--def-let_":{"id":"/The--PSBP--Library-type-classes/Programs-and-program-combinators-defined-in-terms-of-the-basic-ones/#PSBP-Documentation--The--PSBP--Library-type-classes--Programs-and-program-combinators-defined-in-terms-of-the-basic-ones--def-let_","header":"4.7.2. def let_","context":"PSBP Documentation\u0009The  PSBP  Library type classes\u0009Programs and program combinators defined in terms of the basic ones","contents":"Using the let_ combinator an intermediate value can be constructed that is available for later use.\n\ndef let_\n    [Functional program]\n    [Sequential program]\n    [Creational program] :\n  program α β → (program (α × β) γ → program α γ) :=\n    λ αpβ αaβpγ => identity &&& αpβ >=> αaβpγ\n\n def in_ : α → α := id\n\n\nThe p in αpβ and αaβpγ stands for \"program\", and that the a in αaβpγ stands for \"and\". Think of let_ as a\nlibrary level keyword. in_ is also a library level keyword that, depending on your taste, may make programs more\nreadable.\n\n"}});