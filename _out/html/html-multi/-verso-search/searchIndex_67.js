window.docContents[67].resolve({"/Warning/#PSBP-Documentation--Warning":{"id":"/Warning/#PSBP-Documentation--Warning","header":"1. Warning","context":"PSBP Documentation","contents":"This is work in progress.\n\nThe book and it's code is far from complete and may change.\n\nFor now I do not use the universe capabilities of Lean.\n\nI (try to) format code is a consistent way.\n\n"},"/Programming-With-State/class-WithState-___/#PSBP-Documentation--Programming-With-State--class-WithState-___--def-modifyStateWith":{"id":"/Programming-With-State/class-WithState-___/#PSBP-Documentation--Programming-With-State--class-WithState-___--def-modifyStateWith","header":"9.1.1. def modifyStateWith","context":"PSBP Documentation\u0009Programming With State\u0009class WithState σ","contents":"Below is modifyStateWith, a useful programming with state capability.\n\nLet\n\ndef first\n    [Functional program] :\n  program (α × β) α :=\n    asProgram λ (α, _) => α\n\ndef second\n    [Functional program] :\n  program (α × β) β :=\n    asProgram  λ (_, β) => β\n\n\nin (only first above is used)\n\ndef modifyStateWith\n    [Functional program]\n    [Sequential program]\n    [Creational program]\n    [WithState σ program] :\n  (σ → σ) → program α α :=\n    λ σfσ =>\n      let_ ((readState >=> asProgram σfσ) >=> writeState) $\n        in_ $\n          first\n\n\nmodifyStateWith modifies the state using a function.\n\n"}});