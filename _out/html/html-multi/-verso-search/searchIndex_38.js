window.docContents[38].resolve({"/Programming-With-Failure/safeDiv/#PSBP-Documentation--Programming-With-Failure--safeDiv":{"id":"/Programming-With-Failure/safeDiv/#PSBP-Documentation--Programming-With-Failure--safeDiv","header":"11.4. safeDiv","context":"PSBP Documentation\u0009Programming With Failure","contents":"Let\n\ndef isNotZeroF: Nat → Bool :=\n  λ n => n != 0\n\ndef unsafeDivF : Nat × Nat → Nat :=\n  λ ⟨n, m⟩ => n / m\n\n\nand\n\ndef isNotZero [Functional program] :\n  program Nat Bool :=\n    asProgram isNotZeroF\n\ndef unsafeDiv [Functional program] :\n  program (Nat × Nat) Nat :=\n    asProgram unsafeDivF\n\n\nin\n\ndef safeDiv\n    [Functional program]\n    [Creational program]\n    [Sequential program]\n    [Conditional program]\n    [WithFailure String program] :\n  program (Nat × Nat) Nat :=\n    if_ (second >=> isNotZero) unsafeDiv $\n      else_ $\n        failWith (λ (n, m) =>\n          s!\"tried to divide {n} by {m}\")\n\n\n#eval\n  materializeActiveWithFailure\n    safeDiv\n    (10, 5)\n\n\nSum.inr 2\n\n\n#eval\n  materializeActiveWithFailure\n    safeDiv\n    (10, 0)\n\n\nSum.inl \"tried to divide 10 by 0\"\n\n\n"}});