window.docContents[86].resolve({"/Theorems/Functional--theorems/#PSBP-Documentation--Theorems--Functional--theorems":{"id":"/Theorems/Functional--theorems/#PSBP-Documentation--Theorems--Functional--theorems","header":"8.1. Functional  theorems","context":"PSBP Documentation\u0009Theorems","contents":"Theorem functional_identity below is proved by definition using by calc and\nrfl.\n\n@[simp] theorem functional_identity\n  {α : Type}\n    [Applicative computation] :\n    (identity :\n      FromComputationValuedFunction computation α α)\n      = asProgram id := by\n  calc\n    identity\n        = asProgram id\n          := rfl\n\n\nTheorem functional_sequential' also uses congrArg and funext.\n\nTheorem functional_sequential' uses the pure_bind law of LawfulMonad.\n\ntheorem functional_sequential'\n  {α β γ : Type}\n    [Monad computation]\n    [LawfulMonad computation]\n  (αfβ : α → β)\n  (βfγ : β → γ) :\n    (asProgram αfβ >=> asProgram βfγ :\n      FromComputationValuedFunction computation α γ)\n      = asProgram (βfγ ∘ αfβ) := by\n  calc\n    (asProgram αfβ >=> asProgram βfγ :\n      FromComputationValuedFunction computation α γ)\n        = (⟨λ α => pure $ αfβ α⟩ >=> ⟨λ β => pure $ βfγ β⟩)\n          := rfl\n    _   = ⟨λ α => (pure $ αfβ α) >>= λ β => pure $ βfγ β⟩\n          := rfl\n    _   = ⟨λ α => pure $ βfγ (αfβ α)⟩\n          := congrArg\n               FromComputationValuedFunction.mk\n               (funext λ α =>\n                 pure_bind (αfβ α) (λ β => pure $ βfγ β))\n    _   = ⟨λ α => pure $ (βfγ ∘ αfβ) α⟩\n          := rfl\n    _   = asProgram (βfγ ∘ αfβ)\n          := rfl\n\n\nTheorem functional_sequential uses by simp to let Lean do the heavy lifting\n\n@[simp] theorem functional_sequential\n  {α β γ : Type}\n    [Monad computation]\n    [LawfulMonad computation]\n  (αfβ : α → β)\n  (βfγ : β → γ) :\n    (asProgram αfβ >=> asProgram βfγ :\n      FromComputationValuedFunction computation α γ)\n      = asProgram (βfγ ∘ αfβ) := by\n  simp[asProgram, andThen]\n\n\nNote that functional_sequential is not annotated by @[simp] so that functional_sequential' cannot use it. As a\nconsequence it is necessary to tell Lean to unfold everything in order for it to see the real definitions involved.\n\n"}});