window.docContents[17].resolve({"/Naming-conventions/#PSBP-Documentation--Naming-conventions":{"id":"/Naming-conventions/#PSBP-Documentation--Naming-conventions","header":"2. Naming conventions","context":"PSBP Documentation","contents":"In this document, program, intentionally written in typewriter font, has a specific, technical meaning while the word\nprogramming has a general meaning. For general purposes, this document uses the word code instead of the word program.\nAs a consequence, in this document, the word programming means (the process of) writing code.\n\nI hope that this naming convention does not lead to any confusion.\n\nPSBP stands for \"Program Specification Based Programming\" (using the naming conventions above).\n\nPSBP is a pointfree effectful functional programming library, written using the Lean programming language.\n\nIn what follows Lean will rarely explictly be mentioned. It will implicitly be taken for granted.\n\nPSBP can be seen as a programming DSL, a Domain Specific Language for the programming domain.\n\nPSBP has a variety of programming related binary type constructor classes, among others Functional, Functorial,\nCreational, Sequential and Conditional. PSBP code consistently names their binary type constructor parameter\nprogram.\n\nThe PSPB type constructor classes, just like all other classes, are specifications, also called interfaces in the\nprogramming world. They have members that declare basic program specifications and basic program specification\ncombinators to combine program specifications to composite program specifications. Derived program specifications and\nderived program specification combinators can then be defined in terms of (declared or defined) program specifications\nand (declared or defined) program specification combinators. As such program specifications are components of a\ncomponent system.\n\nThe Lean standard library has a variety of computing related unary type constructor classes, among others Functor,\nApplicative and Monad. PSBP code consistently names their unary type constructor parameter computation.\n\nThe Lean standard library type constructor classes above, just like all other classes, are specifications, also called\ninterfaces in the programming world. They have members that declare basic computation specifications and basic\ncomputation specification combinators to combine computation specifications to composite computation specifications.\nDerived computation specifications and derived computation specification combinators can then be defined in terms of\n(declared or defined) computation specifications and (declared or defined) computation specification combinators. As\nsuch computation specifications are components of a component system.\n\nBy now you may be asking why I used program specification resp. computation specification instead of simply using\nprogram resp. computation. First of all, because program specifications resp. computation specifications are\nspecifications. Type constructor class instances, also called implemenations in the programming world, of the various\ntype constructor classes, in terms of whose members program specifications resp. computation specifications are defined,\nneed to be given to materialize program specifications resp. computation specifications. It are those materializations\nthat are called programs resp. computations.\n\nIn what follows, by abuse of language, I will often also use the word program (recall, a materialization of a program\nspecification corresponding to instances of programming related type constructor classes) instead of program\nspecification and often also use the word computation (recall, a materialization of a computation specification\ncorresponding to instances of computing related type constructor classes) instead of computation specification.\n\nHopefully this abuse of language does not lead to any confusion.\n\nIt is instructive to compare this abuse of language with the title\nCeci n'est pas une pipe\nof the painting of Ren√© Magritte. The painting itself is, of course, not a pipe, it is a description of a pipe.\nYet, when you look at the painting, you might think of it as being a pipe. Much in the same way, when an architect is\nshowing you the specification of a house, for example as a 3D animation (a special kind of description), communication,\nby abuse of language, happens using words like kitchen resp. bathroom instead of kitchen specification resp. bathroom\nspecification.\n\n"}});