window.docContents[148].resolve({"/fibonacci--and--factorial/def-let_/#PSBP-Documentation--fibonacci--and--factorial--def-let_":{"id":"/fibonacci--and--factorial/def-let_/#PSBP-Documentation--fibonacci--and--factorial--def-let_","header":"5.1. def let_","context":"PSBP Documentation\u0009fibonacci  and  factorial","contents":"Using the let_ combinator an intermediate value can be constructed that is available for later use.\n\ndef let_\n    [Functional program]\n    [Sequential program]\n    [Creational program] :\n  program α β → (program (α × β) γ → program α γ) :=\n    λ αpβ αaβpγ => identity &&& αpβ >=> αaβpγ\n\n def in_ : α → α := id\n\n\nThink of let_ as a library level keyword. in_ is also a library level keyword that, depending on your taste, may\nmake programs more readable.\n\n"},"/Programming-With-Failure/twiceAccumulatingSafeDivIsOne/#PSBP-Documentation--Programming-With-Failure--twiceAccumulatingSafeDivIsOne":{"id":"/Programming-With-Failure/twiceAccumulatingSafeDivIsOne/#PSBP-Documentation--Programming-With-Failure--twiceAccumulatingSafeDivIsOne","header":"13.11. twiceAccumulatingSafeDivIsOne","context":"PSBP Documentation\u0009Programming With Failure","contents":"def twiceAccumulatingSafeDivIsOne\n[Functional program]\n    [Creational program]\n    [Sequential program]\n    [Conditional program]\n    [WithFailure (List String) program] :\n  program ((Nat × Nat) × Nat) Nat :=\n    ((first >=> accumulatingSafeDiv) &&& second) >=>\n    accumulatingSafeDiv\n\n\n#eval\n  materializeActiveWithValidation\n    twiceAccumulatingSafeDivIsOne\n    ((10, 5), 2)\n\n\nSum.inr 1\n\n\n#eval\n  materializeActiveWithValidation\n    twiceAccumulatingSafeDivIsOne\n    ((10, 2), 0)\n\n\nSum.inl \"tried to divide 5 by 0\"\n\n\n#eval\n  materializeActiveWithValidation\n    twiceAccumulatingSafeDivIsOne\n    ((10, 0), 2)\n\n\nSum.inl [\"tried to divide 10 by 0\"]\n\n\n#eval\n  materializeActiveWithValidation\n    twiceAccumulatingSafeDivIsOne\n    ((10, 0), 0)\n\n\nSum.inl [\"tried to divide 10 by 0\"]\n\n\n"}});