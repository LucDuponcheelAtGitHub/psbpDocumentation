window.docContents[12].resolve({"/Positional-Programming/instance-Positional/#PSBP-Documentation--Positional-Programming--instance-Positional":{"id":"/Positional-Programming/instance-Positional/#PSBP-Documentation--Positional-Programming--instance-Positional","header":"9.4. instance Positional","context":"PSBP Documentation\u0009Positional Programming","contents":"instance\n    [Functional program]\n    [Creational program]\n    [Sequential program] :\n    Positional program where\n  at_ {σ α β γ : Type} :\n    program α β →\n    program σ α →\n    program (σ × β) γ →\n    program σ γ :=\n      λ αpβ σpα =>\n        let_ (σpα >=> αpβ)\n\n\nThink of σpα as accessing a (multi-)value, α, on the runtime stack, σ. Think of αpβ as transforming that\n(multi-)value to β. let_ then pushes β on σ obtaining σ × β. So, if it possible to transform α to an\nintermediate value β, to transform the runtime stack σ to α, and to transform σ × β to γ, then it is possible\nto transform σ to γ.\n\n"}});