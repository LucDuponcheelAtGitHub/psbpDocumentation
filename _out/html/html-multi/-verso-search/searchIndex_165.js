window.docContents[165].resolve({"/Computation-Valued-Functions/#PSBP-Documentation--Computation-Valued-Functions":{"id":"/Computation-Valued-Functions/#PSBP-Documentation--Computation-Valued-Functions","header":"6. Computation Valued Functions","context":"PSBP Documentation","contents":"Using computation valued functions is a generic way to implement the program related type classes in terms of the\ncomputation related type classes\n\nstructure FromComputationValuedFunction\n    (computation : (Type → Type)) (α β : Type) where\n  toComputationValuedFunction : α → computation β\n\ninstance [Applicative computation] :\n    Functional\n      (FromComputationValuedFunction computation) where\n  asProgram :=\n    λ αfβ => ⟨λ α => pure $ αfβ α⟩\n\ninstance [Functor computation] :\n    Functorial\n      (FromComputationValuedFunction computation) where\n  andThenF :=\n    λ ⟨αfcβ⟩ => λ βfγ => ⟨λ α => βfγ <$> αfcβ α⟩\n\ninstance [Applicative computation] :\n    Creational\n      (FromComputationValuedFunction computation) where\n  product := λ ⟨αfcβ⟩ ⟨αfcγ⟩ =>\n    ⟨λ α => pure Prod.mk <*> αfcβ α <*> αfcγ α⟩\n\ninstance [Monad computation] :\n    Sequential\n      (FromComputationValuedFunction computation) where\n  andThen :=\n    λ ⟨αfcβ⟩ ⟨βfcγ⟩ => ⟨λ α => αfcβ α >>= βfcγ⟩\n\ndef foldSum {γ β α : Type}\n    (γfα : γ → α)\n    (βfα : β → α)\n    (sum : γ ⊕ β) : α :=\n  match sum with\n  | .inl tc => γfα tc\n  | .inr tb => βfα tb\n\ninstance :\n    Conditional\n      (FromComputationValuedFunction computation) where\n  sum := λ ⟨γfγα⟩ ⟨βfγα⟩ => ⟨foldSum γfγα βfγα⟩\n\n\nThe the c in αfcβ stands for \"computation\".\n\n"}});