window.docContents[180].resolve({"/Programming-With-State/fibonacciIncrementingArgumentPair/#PSBP-Documentation--Programming-With-State--fibonacciIncrementingArgumentPair":{"id":"/Programming-With-State/fibonacciIncrementingArgumentPair/#PSBP-Documentation--Programming-With-State--fibonacciIncrementingArgumentPair","header":"12.5. fibonacciIncrementingArgumentPair","context":"PSBP Documentation\u0009Programming With State","contents":"Program fibonacciIncrementingArgumentPair below shows the effectfulness of programs with state by using the\ninitial state as initial (argument) value and modifying it.\n\nLet\n\nunsafe def fibonacciIncrementingArgument\n    [Functional program]\n    [Creational program]\n    [Sequential program]\n    [Conditional program]\n    [WithState Nat program] :\n  program Unit Nat :=\n    withInitialStateAsInitialValue fibonacci >=>\n    modifyStateWith (. + 1)\n\n\nin\n\nunsafe def fibonacciIncrementingArgumentPair\n    [Functional program]\n    [Creational program]\n    [Sequential program]\n    [Conditional program]\n    [WithState Nat program] :\n  program Unit (Nat × Nat) :=\n    fibonacciIncrementingArgument &&&\n    fibonacciIncrementingArgument\n\n\n#eval\n  materializeActiveWithState\n    fibonacciIncrementingArgumentPair\n    ()\n    10\n\n\n"},"/Programming-With-Failure/addAccumulatingSafeDivProduct/#PSBP-Documentation--Programming-With-Failure--addAccumulatingSafeDivProduct":{"id":"/Programming-With-Failure/addAccumulatingSafeDivProduct/#PSBP-Documentation--Programming-With-Failure--addAccumulatingSafeDivProduct","header":"13.13. addAccumulatingSafeDivProduct","context":"PSBP Documentation\u0009Programming With Failure","contents":"def addAccumulatingSafeDivProduct\n[Functional program]\n    [Creational program]\n    [Sequential program]\n    [Conditional program]\n    [WithFailure (List String) program] :\n  program ((Nat × Nat) × (Nat × Nat)) Nat :=\n    (first >=> accumulatingSafeDiv) &&&\n    (second >=> accumulatingSafeDiv) >=>\n    add\n\n\n#eval\n  materializeActiveWithValidation\n    addAccumulatingSafeDivProduct\n    ((10, 5), (8, 2))\n\n\nSum.inr 6\n\n\n#eval\n  materializeActiveWithValidation\n    addAccumulatingSafeDivProduct\n    ((10, 0), (8, 2))\n\n\nSum.inl [\"tried to divide 10 by 0\"]\n\n\n#eval\n  materializeActiveWithValidation\n    addAccumulatingSafeDivProduct\n    ((10, 5), (8, 0))\n\n\nSum.inl [\"tried to divide 8 by 0\"]\n\n\n#eval\n  materializeActiveWithValidation\n    addAccumulatingSafeDivProduct\n    ((10, 0), (8, 0))\n\n\nSum.inl [\"tried to divide 10 by 0\", \"tried to divide 8 by 0\"]\n\n\n"}});