window.docContents[155].resolve({"/Introduction/#PSBP-Documentation--Introduction":{"id":"/Introduction/#PSBP-Documentation--Introduction","header":"2. Introduction","context":"PSBP Documentation","contents":"Lean defines type classes Functor, Applicative and Monad. They specify computation capabilities. Think of\ncomputations as effectful expressions. They are operational artifacts. They do not really have a meaning in the\nmathematical sense. Functions, on the other hand, are denotational artifacts. They do have a meaning in the mathematical\nsense.\n\nThis document refers to effectful function as programs. So how to specify program capabilities? That is what the PSBP\nlibrary is all about. PSPB stands for \"Program Specification Based Programming\". PSBP is a library that allows you\nto write program specifications in terms of program capabilities that are specified using type classes. You can then\nmaterialize those program specifications according to instances of the type classes in terms of which the program\nspecifications are written. PSBP can be seen as a library level programming language. In what follows we will, by\nabuse of language, often write \"program\" instead of \"program specification\" or\n\"program (specification) materialization\". Hopefully this will not lead to confusion.\n\nJust like expressions are evaluated to yield a result value, computations are executed to a result value, but, executing\nthem may also perform side effects along the way. Just like functions, programs, by running them, transform initial\n(argument) values to filan (result) values, but, they may perform side effects along the way.\n\nWhy programming in terms of program specifications instead of in terms of computations? Both programs and computations\nform a component system. The difference is that programs are closed components, while computations are open components.\nProgramming with programs is pointfree programming while programming with computations is pointful programming.\n\nIn my opinion, it is a more elegant to program pointfree than to program pointful. Likewise, in my opinion, it is more\nelegant to reason in terms of pointffree laws than to reason in terms of with pointful laws. Of course, this is all a\nmatter of taste. I hope to convince you that pointfree is more elegant than pointful.\n\nBy the way, it is alse possible, and sometimes necessary, to program positional using PSBP. Positional programming is\nsimilar to pointful programming. It is is useful for writing recipe-like programs, where, starting from an initial\nvalue, intermediate values are constructed, and. together with the initial value, are passed to the next step, until a\nfinal value is produced. The initial value and intermediate values are accessed positionally. More about this later.\n\nBy the way, a value can be a single-value or a multi-value, repesented a (nested) tuple. More about this later.\n\n"}});